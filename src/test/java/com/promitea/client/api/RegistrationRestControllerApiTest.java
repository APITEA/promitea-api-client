/*
 * Promitea REST API v2
 * Promitea REST API v2
 *
 * OpenAPI spec version: 2.0
 * Contact: support@apitea.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.promitea.client.api;

import java.util.Date;

import com.promitea.client.ApiException;
import com.promitea.client.HasApiClient;
import com.promitea.client.StringUtil;
import com.promitea.client.model.Organization;
import com.promitea.client.model.User;
import com.promitea.client.model.UserToRegister;
import com.sun.tools.corba.se.idl.constExpr.Or;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import static com.promitea.client.api.ProjectRestControllerApiTest.localhost;

/**
 * API tests for RegistrationRestControllerApi
 */
public class RegistrationRestControllerApiTest extends AbstractRestControllerApiTest
{
    private final RegistrationRestControllerApi api = new RegistrationRestControllerApi();
    
    /**
     * Register a new organisation into Promitea
     *
     * Returns organisation detail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerOrganizationUsingPOSTTest() throws ApiException
    {
        Organization organization = createOrganization();

        Organization orgResponse = api.registerOrganizationUsingPOST(organization);

        Assert.assertNotNull(orgResponse);
        Assert.assertNotNull(orgResponse.getId());
        Assert.assertEquals(organization.getName(), orgResponse.getName());
        Assert.assertEquals(organization.getEmail(), orgResponse.getEmail());
        Assert.assertEquals("en", orgResponse.getLanguage());

        UserToRegister userResponse = orgResponse.getUser();

        Assert.assertNotNull(userResponse);
        Assert.assertNotNull(userResponse.getId());
        Assert.assertEquals("Api", userResponse.getFirstName());
        Assert.assertEquals("Manager", userResponse.getLastName());
        Assert.assertEquals(organization.getUser().getEmail(), userResponse.getEmail());
        Assert.assertEquals("123456789", userResponse.getPhone());
    }

    /**
     * Try to register new organisation with different user then admin
     *
     */
    @Test
    public void registerOrganizationUsingPOSTForbiddenTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();

        postOrganizationWithFailure(organization, 403, null);
    }

    /**
     * Try to register new organisation with wrong organisation e-mail format
     *
     */
    @Test
    public void registerOrganizationUsingPOSTWrongOrganizationMailTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.setEmail("12345");

        postOrganizationWithFailure(organization, 400, "Incorrect organisation e-mail format");
    }

    /**
     * Try to register new organisation with empty organisation name
     *
     */
    @Test
    public void registerOrganizationUsingPOSTEmptyOrganizationNameTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.setName("");

        postOrganizationWithFailure(organization, 400, "Organisation name is required");
    }

    /**
     * Try to register new organisation with wrong user e-mail format
     *
     */
    @Test
    public void registerOrganizationUsingPOSTWrongUserMailTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.getUser().setEmail("12345");

        postOrganizationWithFailure(organization, 400, "Incorrect user e-mail format");
    }

    /**
     * Try to register new organisation with empty user e-mail
     *
     */
    @Test
    public void registerOrganizationUsingPOSTEmptyUserMailTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.getUser().setEmail(null);

        postOrganizationWithFailure(organization, 400, "User e-mail is required");
    }

    /**
     * Try to register new organisation with empty user first name
     *
     */
    @Test
    public void registerOrganizationUsingPOSTEmptyUserFirstNameTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.getUser().setFirstName("");

        postOrganizationWithFailure(organization, 400, "User first name is required");
    }

    /**
     * Try to register new organisation with empty user last name
     *
     */
    @Test
    public void registerOrganizationUsingPOSTEmptyUserLastNameTest()
    {
        api.getApiClient().setApiKey("123456789");

        Organization organization = createOrganization();
        organization.getUser().setLastName("");

        postOrganizationWithFailure(organization, 400, "User last name is required");
    }

    private void postOrganizationWithFailure(Organization organization, int code, String message)
    {
        try
        {
            Organization orgResponse = api.registerOrganizationUsingPOST(organization);

            Assert.fail();
        }
        catch (ApiException e)
        {
            Assert.assertEquals(code, e.getCode());

            if (message != null && !message.isEmpty())
            {
                Assert.assertTrue(e.getResponseBody().contains(message));
            }
        }
    }

    @Override
    protected HasApiClient getApiClient()
    {
        return api;
    }

    @Override
    protected String getApiKey()
    {
        return "987654321";
    }

    private Organization createOrganization()
    {
        String email = "trash" + startTime + "@apitea.com";

        Organization organization = new Organization();

        String organizationName = "Test Api Organization - " + startTime;

        organization.setName(organizationName);
        organization.setLanguage("en");
        organization.setEmail(email);

        // User
        UserToRegister user = new UserToRegister();
        user.setFirstName("Api");
        user.setLastName("Manager");
        user.setEmail(email);
        user.setPhone("123456789");

        organization.setUser(user);

        return organization;
    }
}
